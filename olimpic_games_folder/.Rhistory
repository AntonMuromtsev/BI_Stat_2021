pnorm(-0.05,0,1)
pnorm(-0.1,0,1)
pnorm(-0.2,0,1)
pnorm(-0.3,0,1)
pnorm(-0.02,0,1)
pnorm(-0.01,0,1)
pnorm(-1,0,1)
pnorm(-3,0,1)
pnorm(-1,0,1)
pnorm(-2,0,1)
pnorm(-2.2,0,1)
pnorm(-2.3,0,1)
pnorm(-2.25,0,1)
pnorm(-2.27,0,1)
pnorm(-2.22,0,1)
pnorm(-2.21,0,1)
pnorm(-2.2,0,1)
pnorm(-2.18,0,1)
pnorm(-2.17,0,1)
library(dplyr)
mollucs <- read.csv("/Users/tugidon/Downloads/mollusc.csv")
view(mollucs)
View(mollucs)
?read.csv
str(mollucs)
mollucs$Rings <- as.integer(mollucs$Rings)
View(mollucs)
str(mollucs)
mollucs <- read.csv("/Users/tugidon/Downloads/mollusc.csv",
na.strings = c("NA", "No data! I forgot to mesure it!("))
unique(mollucs$Rings)
mollucs$Rings[mollucs$Rings == "nine"] <- 9
mollucs$Rings <- as.integer(mollucs$Rings)
str(mollucs)
unique(mollucs$Rings)
unique(mollucs$Sex..1...male..2...female..3...uvenil.)
names(mollucs)
names(mollucs)[3]
names(mollucs)[3] <-  sex
names(mollucs)[3] <- "sex"
names(mollucs)
mollucs$sex[mollucs$sex == c("1", "2", "3", "one", "three")] <- c("male", "female", "uvenil", "male","uvenil")
?mutate
select(mollucs, "1" = "male")
mollucs$sex[mollucs$sex == "1"] <- "male"
mollucs$sex[mollucs$sex == "1"] <- "male", "2", "3", "one", "three")] <- c("male", "female", "uvenil", "male","uvenil")
mollucs$sex[mollucs$sex == "1"] <- "male"
mollucs$sex[mollucs$sex == "2"] <- "female"
mollucs$sex[mollucs$sex == "3"] <- "uvenil"
mollucs$sex[mollucs$sex == "one"] <- "male"
mollucs$sex[mollucs$sex == "three"] <- "uvenil"
str(mollucs)
as.factor(mollucs$sex)
str(mollucs)
mollucs$sex <- as.factor(mollucs$sex)
str(mollucs)
View(mollucs)
mutate(length_z_scores = (Length - mean(Length))/sd(Length))
mutate(mollucs, length_z_scores = (Length - mean(Length))/sd(Length))
str(mollucs)
mean(mollucs$Length)
mutate(mollucs, length_z_scores = (Length - mean(Length, na.rm = T))/sd(Length, na.rm = T))
View(mollucs)
names(mollucs)
mutate(mollucs, length_z_scores = (Length - mean(Length, na.rm = T))/sd(Length, na.rm = T))
names(mollucs)
mollucs_st <- mutate(mollucs, length_z_scores = (Length - mean(Length, na.rm = T))/sd(Length, na.rm = T))
View(mollucs_st)
?t-test
?t.test
t.test(mollucs$Diameter[mollucs$Rings == 5], mollucs$Diameter[mollucs$Rings == 15])
?wilcox.test
wilcox.test(mollucs$Diameter[mollucs$Rings == 5], mollucs$Diameter[mollucs$Rings == 15])
?corre
??correlation
cor(mollucs$Diameter[mollucs$Rings == 5], mollucs$Diameter[mollucs$Rings == 15)
cor(mollucs$Diameter, mollucs$Whole_weight)
?cor
cor(mollucs$Diameter, mollucs$Whole_weight, na.rm = T)
cor(mollucs$Diameter, mollucs$Whole_weight)
cor(mollucs$Diameter, mollucs$Whole_weight, method = "pearson")
cor(mollucs$Diameter, mollucs$Whole_weight, method = "pearson", na.rm =T)
cor(mollucs$Diameter, mollucs$Whole_weight, method = "pearson", na.rm = T)
cor(mollucs$Diameter, mollucs$Whole_weight, method = "pearson")
cor(mollucs$Diameter, mollucs$Whole_weight, method = "pearson")
cor(mollucs$Diameter, mollucs$Whole_weight, method = "pearson", use = "complete.obs")
?t.test
??correlation
??correlation test
??"correlation test"
cor.test(mollucs$Diameter, mollucs$Whole_weight, method = "pearson", use = "complete.obs")
?pnorm
t = (5.1 - 4.9)/(0.4/5)
t <-  (5.1 - 4.9)/(0.4/5)
2*pt(-abs(t), df = 24)
library(dplyr)
mollucs <- read.csv("/Users/tugidon/Downloads/mollusc.csv",
na.strings = c("NA", "No data! I forgot to mesure it!(")) # check for other NAs
View(mollucs)
str(mollucs)
mollucs$Rings[mollucs$Rings == "nine"] <- 9  # from line 9 to line 16
mollucs$Rings <- as.integer(mollucs$Rings)
names(mollucs)[3] <- "sex"
mollucs$sex[mollucs$sex == "1"] <- "male"
mollucs$sex[mollucs$sex == "2"] <- "female"
library(dplyr)
mollucs <- read.csv("/Users/tugidon/Downloads/mollusc.csv",
na.strings = c("NA", "No data! I forgot to mesure it!(")) # check for other NAs
View(mollucs)
str(mollucs)
mollucs$Rings[mollucs$Rings == "nine"] <- 9  # from line 9 to line 16
mollucs$Rings <- as.integer(mollucs$Rings)
names(mollucs)[3] <- "sex"
mollucs$sex[mollucs$sex == "1"] <- "male"
mollucs$sex[mollucs$sex == "2"] <- "female"
mollucs$sex[mollucs$sex == "3"] <- "uvenil"
mollucs$sex[mollucs$sex == "one"] <- "male"
mollucs$sex[mollucs$sex == "three"] <- "uvenil"
mollucs$sex <- as.factor(mollucs$sex)
mollucs_st <- mutate(mollucs, length_z_scores = (Length - mean(Length, na.rm = T))/sd(Length, na.rm = T)) # standartization
View(mollucs_st)
t.test(mollucs$Diameter[mollucs$Rings == 5], mollucs$Diameter[mollucs$Rings == 15]) # значимо отличается
wilcox.test(mollucs$Diameter[mollucs$Rings == 5], mollucs$Diameter[mollucs$Rings == 15]) #значимо отличаеся
cor(mollucs$Diameter, mollucs$Whole_weight, method = "pearson", use = "complete.obs")
cor.test(mollucs$Diameter, mollucs$Whole_weight, method = "pearson", use = "complete.obs")
shapiro.test(mollucs$Diameter[mollucs$Rings == 15])
shapiro.test(mollucs$Diameter[mollucs$Rings == 5])
qqnorm(mollucs$Diameter[mollucs$Rings == 5], pch = 1, frame = F)
qqnorm(mollucs$Diameter[mollucs$Rings == 5], col = 'steelblue', lwd = 2)
qqnorm(mollucs$Diameter[mollucs$Rings == 5], pch = 1, frame = F)
qqline(mollucs$Diameter[mollucs$Rings == 5], col = 'steelblue', lwd = 2)
1 +2
c(1) + c(2)
c(1,2)
c(1,2) + c(3)
c()
a = c()
a
a <- append(a,10)
a
stat_vec = c()
for (i in 1:100){
unit = sample(mollucs$Diameter[mollucs$Rings == 5], 5)
x = mean(unit)
stat_vec <- append(stat_vec, x)
}
stat_vec
mean(mollucs$Diameter[mollucs$Rings == 5])
qplot(stat_vec)
plot(stat_vec)
hist(stat_vec)
shapiro.test(stat_vec)
qnorm(stat_vec, pch = 1, frame = F)
qnorm(stat_vec, pch = 1, frame = F)
qnorm(stat_vec)
qqnorm(stat_vec, pch = 1, frame = F)
qline(stat_vec, col = "stellblue", lwd = 2)
qqline(stat_vec, col = "stellblue", lwd = 2)
qqline(stat_vec, col = "steelblue", lwd = 2)
qqnorm(stat_vec, pch = 1, frame = F)
qqline(stat_vec, col = 'steelblue', lwd = 2)
stat_vec = c() # сгенерим 100 средних для диаметра моллюсков с 5-ю кольцами и проверим,
# нормально ли распределено среднее
for (i in 1:1000){
unit = sample(mollucs$Diameter[mollucs$Rings == 5], 5)
x = mean(unit)
stat_vec <- append(stat_vec, x)
}
qqnorm(stat_vec, pch = 1, frame = F)
qqline(stat_vec, col = 'steelblue', lwd = 2)
shapiro.test(stat_vec)
?qqnorm
qqnorm(stat_vec)
qqline(stat_vec, col = 'steelblue', lwd = 3)
qqline(stat_vec, col = 'steelblue', lwd = 1)
qqline(stat_vec, col = 'steelblue', lwd = 10)
qqline(stat_vec, col = 'steelblue', lwd = 1)
qqnorm(stat_vec)
qqline(stat_vec, col = 'steelblue', lwd = 1)
qqline(stat_vec, col = 'steelblue', lwd = 2)
shapiro.test(stat_vec)
# нормально ли распределено среднее
for (i in 1:10000){
unit = sample(mollucs$Diameter[mollucs$Rings == 5], 5)
x = mean(unit)
stat_vec <- append(stat_vec, x)
}
qqnorm(stat_vec)
qqline(stat_vec, col = 'steelblue', lwd = 2)
# нормально ли распределено среднее
for (i in 1:100){
unit = sample(mollucs$Diameter[mollucs$Rings == 5], 5)
x = mean(unit)
stat_vec <- append(stat_vec, x)
}
qqnorm(stat_vec)
qqline(stat_vec, col = 'steelblue', lwd = 2)
shapiro.test(stat_vec)
stat_vec = c() # сгенерим 100 средних для диаметра моллюсков с 5-ю кольцами и проверим,
# нормально ли распределено среднее
for (i in 1:100){
unit = sample(mollucs$Diameter[mollucs$Rings == 5], 5)
x = mean(unit)
stat_vec <- append(stat_vec, x)
}
qqnorm(stat_vec)
qqline(stat_vec, col = 'steelblue', lwd = 2)
shapiro.test(stat_vec)
stat_vec = c() # сгенерим 100 средних для диаметра моллюсков с 5-ю кольцами и проверим,
# нормально ли распределено среднее
for (i in 1:1000){
unit = sample(mollucs$Diameter[mollucs$Rings == 5], 5)
x = mean(unit)
stat_vec <- append(stat_vec, x)
}
qqnorm(stat_vec)
qqline(stat_vec, col = 'steelblue', lwd = 2)
shapiro.test(stat_vec)
length(mollucs$Diameter[mollucs$Rings == 5])
# нормально ли распределено среднее
for (i in 1:5000){
unit = sample(mollucs$Diameter[mollucs$Rings == 5], 115, replace = T)
x = mean(unit)
stat_vec <- append(stat_vec, x)
}
qqnorm(stat_vec)
qqline(stat_vec, col = 'steelblue', lwd = 2)
shapiro.test(stat_vec)
# нормально ли распределено среднее
for (i in 1:4000){
unit = sample(mollucs$Diameter[mollucs$Rings == 5], 115, replace = T)
x = mean(unit)
stat_vec <- append(stat_vec, x)
}
qqnorm(stat_vec)
qqline(stat_vec, col = 'steelblue', lwd = 2)
shapiro.test(stat_vec)
stat_vec = c() # сгенерим 100 средних для диаметра моллюсков с 5-ю кольцами и проверим,
# нормально ли распределено среднее
for (i in 1:4000){
unit = sample(mollucs$Diameter[mollucs$Rings == 5], 115, replace = T)
x = mean(unit)
stat_vec <- append(stat_vec, x)
}
qqnorm(stat_vec)
qqline(stat_vec, col = 'steelblue', lwd = 2)
shapiro.test(stat_vec)
hist(stat_vec)
length(mollucs$Diameter[mollucs$Rings == 5])
length( mollucs$Diameter[mollucs$Rings == 15])
t.test(mollucs$Diameter[mollucs$Rings == 5], mollucs$Diameter[mollucs$Rings == 15]) #отличается
sessionInfo()
library(dplyr)
library(ggplot2)
library(Rmisc)
library(Rmisc)
library(dplyr)
library(ggplot2)
library(ggpubr)
exp <- rbind(c(20,15), c(11,12), c(7,9))
exp
chisq.test(exp)
groups <- redline()
groups <- readline()
groups
as.integer(groups)
groups
intput <- readline()
groups <- strsplit(input, " ")
input <- readline()
groups <- strsplit(input, " ")
groups
as.integer(groups)
as.integer(groups[1])
groups[1]
groups[2]
aja <-  as.integer(groups[[1]])
aja
input <- readline()
6
k <- as.integer(readline())
k
maximum = max(groups)
groups <-  as.integer(groups[[1]])
maximum = max(groups)
maximum
rm(list =ls())
input <- readline()
input_split <- strsplit(input, " ")
groups <-  as.integer(groups[[1]])
minimum = 1
maximum = max(groups)
rm(list =ls())
input <- readline()
k <- as.integer(readline())
k <- readline()
k <- as.integer(k)
k_i <- as.integer(k)
rm(list = ls())
input <- readline()
k <- readline()
k_i <- as.integer(k)
input_split <- strsplit(input, " ")
groups <-  as.integer(groups[[1]])
minimum = 1
maximum = max(groups)
groups <-  as.integer(input_split[[1]])
minimum = 1
maximum = max(groups)
maximum
groups//2
groups/2
groups%/%2
mid <-  k_i %/% 2
mid <-  (maximum + minimum) %/% 2
s <- groups %/% mid
sum(s)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE )
head(HW_filt_Zst_frame$Height_z_scores)
istall.packages("tableHTML")
install.packages("tableHTML")
library(tableHTML)
rm(list=ls())
library(Rmisc)
library(ggpubr)
library(dplyr)
library(ggplot2)
library(tableHTML)
results_bind <- function(extenction) {
file_names <- list.files(pattern = paste0("*.", extenction))
if (extenction == "csv") {
frames <- lapply(file_names, read.csv, na.strings = c("NA", ""))
} else if (extenction == "tsv") {
frames <- lapply(file_names, read.table, sep = '\t',
header = TRUE, na.strings = c("NA", ""))
}
frames_binded <- do.call("rbind", frames)
final_frame <- as_data_frame(frames_binded)
return(final_frame)
}
raw_frame <-  results_bind("csv")
raw_frame$Medal[is.na(raw_frame$Medal)] <- "participant"
filt_frame <- filter(raw_frame, !is.na(Name),
!is.na(Age),
!is.na(Sex),
Sex != "G",
!is.na(Team),
!is.na(NOC),
!is.na(Games),
!is.na(Year),
!is.na(Season),
!is.na(City),
!is.na(Sport),
!is.na(Event)) %>%
mutate( Sex = as.factor(Sex),
Season = as.factor(Season),
Medal = as.factor(Medal))
HW_filt_frame <- filter(filt_frame, !is.na(Height), !is.na(Weight))
rm(list = ls())
setwd("/Users/tugidon/Desktop/R_project_1/athlete_events/")
library(Rmisc)
library(ggpubr)
library(dplyr)
library(ggplot2)
library(tableHTML)
results_bind <- function(extenction) {
file_names <- list.files(pattern = paste0("*.", extenction))
if (extenction == "csv") {
frames <- lapply(file_names, read.csv, na.strings = c("NA", ""))
} else if (extenction == "tsv") {
frames <- lapply(file_names, read.table, sep = '\t',
header = TRUE, na.strings = c("NA", ""))
}
frames_binded <- do.call("rbind", frames)
final_frame <- as_data_frame(frames_binded)
return(final_frame)
}
raw_frame <-  results_bind("csv")
raw_frame$Medal[is.na(raw_frame$Medal)] <- "participant"
filt_frame <- filter(raw_frame, !is.na(Name),
!is.na(Age),
!is.na(Sex),
Sex != "G",
!is.na(Team),
!is.na(NOC),
!is.na(Games),
!is.na(Year),
!is.na(Season),
!is.na(City),
!is.na(Sport),
!is.na(Event)) %>%
mutate( Sex = as.factor(Sex),
Season = as.factor(Season),
Medal = as.factor(Medal))
HW_filt_frame <- filter(filt_frame, !is.na(Height), !is.na(Weight))
age_uvenile_by_sex_1992 <- filter(filt_frame, Games %in% c("1992 Summer", "1992 Winter"))  %>%
group_by(Sex) %>% summarise(min(Age))
View(age_uvenile_by_sex_1992)
tableHTML(age_uvenile_by_sex_1992)
Top3_MedalDiff_SeasonDiff
View(raw_frame))
View(raw_frame)
Summer_Gold <- filter(filt_frame, Season == "Summer", Medal == "Gold") %>% group_by(NOC) %>%
summarise(Gold_Summer_nubmer = length(Medal)) %>% arrange(desc(Gold_Summer_nubmer)) %>% slice(1:3)
Summer_Silver <- filter(filt_frame, Season == "Summer", Medal == "Silver") %>% group_by(NOC) %>%
summarise(Silver_Summer_nubmer = length(Medal)) %>% arrange(desc(Silver_Summer_nubmer)) %>% slice(1:3)
Summer_Broze <- filter(filt_frame, Season == "Summer", Medal == "Bronze") %>% group_by(NOC) %>%
summarise(Bronse_Summer_nubmer = length(Medal)) %>% arrange(desc(Bronse_Summer_nubmer)) %>% slice(1:3)
Winter_Gold <- filter(filt_frame, Season == "Winter", Medal == "Gold") %>% group_by(NOC) %>%
summarise(Gold_Winter_nubmer = length(Medal)) %>% arrange(desc(Gold_Winter_nubmer)) %>% slice(1:3)
Winter_Silver <- filter(filt_frame, Season == "Winter", Medal == "Silver") %>% group_by(NOC) %>%
summarise(Silver_Winter_nubmer = length(Medal)) %>% arrange(desc(Silver_Winter_nubmer)) %>% slice(1:3)
Winter_Bronse <- filter(filt_frame, Season == "Winter", Medal == "Bronze") %>% group_by(NOC) %>%
summarise(Broze_Winter_nubmer = length(Medal)) %>% arrange(desc(Broze_Winter_nubmer)) %>% slice(1:3)
Top3_MedalDiff_SeasonDiff = list(Summer_Gold,
Summer_Silver,
Summer_Broze,
Winter_Gold,
Winter_Silver,
Winter_Bronse)
print(Top3_MedalDiff_SeasonDiff)
a <- as.data.frame(Top3_MedalDiff_SeasonDiff)
aa
a
View(a)
wilcox.test(Winter$Age[Winter$Sex == "M"],
Winter$Age[Winter$Sex == "F"])
Winter <-  filter(filt_frame, Season == "Winter")
wilcox.test(Winter$Age[Winter$Sex == "M"],
Winter$Age[Winter$Sex == "F"])
ggplot(Winter, aes(x = Sex, y = Age))+
geom_boxplot()+
stat_compare_means(method = "wilcox.test", comparisons = list(c("F", "M")))+
labs(title = "Competitors Age on Winter Olympic Games",
caption = "wilcoxon test performed" )
sport_with_min_max_mean_age <- group_by(filt_frame, Sport) %>%
summarise(mean_Age = mean(Age)) %>%
filter(mean_Age %in% c(max(mean_Age), min(mean_Age)))
global_mean_age <- mean(filt_frame$Age)
sport_with_min_max_mean_age
global_mean_age
Rhythmic_Gymnastics <- filter(filt_frame, Sport == "Rhythmic Gymnastics")
nrow(Rhythmic_Gymnastics)
shapiro.test(Rhythmic_Gymnastics$Age)
t.test(Rhythmic_Gymnastics_age$Age, mu = global_mean_age,
alternative = "two.sided")
t.test(Rhythmic_Gymnastics$Age, mu = global_mean_age,
alternative = "two.sided")
Rhythmic_Gymnastics <- filter(Rhythmic_Gymnastics, Name == unique(Name))
Unique_Rhytmic_Gymnastics <- Rhythmic_Gymnastics$Age[Rhythmic_Gymnastics$Name == unique(Rhythmic_Gymnastics$Name)]
nrow(Unique_Rhytmic_Gymnastics)
Unique(Rhythmic_Gymnastics$Age)
unique(Rhythmic_Gymnastics$Age)
unique(Rhythmic_Gymnastics$Namw)
unique(Rhythmic_Gymnastics$Name)
Rhythmic_Gymnastics$Name
Rhythmic_Gymnastics$Age
Rhythmic_Gymnastics <- filter(filt_frame, Sport == "Rhythmic Gymnastics")
Rh
Rhythmic_Gymnastics$Name
unique(Rhythmic_Gymnastics$Name)
Rhythmic_Gymnastics <- filter(filt_frame, Sport == "Rhythmic Gymnastics")
Rhythmic_Gymnastics <- filter(Rhythmic_Gymnastics, Name == unique(Name))
Rhythmic_Gymnastics <- filter(Rhythmic_Gymnastics, Name %in% c(unique(Name)))
nrow(Rhythmic_Gymnastics)
Rhythmic_Gymnastics <- filter(filt_frame, Sport == "Rhythmic Gymnastics")
Rhythmic_Gymnastics <- filter(filt_frame, Sport == "Rhythmic Gymnastics")
nrow(Rhythmic_Gymnastics)
Rhythmic_Gymnastics <- filter(filt_frame, Sport == "Rhythmic Gymnastics")
Rhythmic_Gymnastics$Age[unique(Rhythmic_Gymnastics$Name)]
sport_with_min_max_mean_age <- group_by(filt_frame, Sport) %>%
summarise(mean_Age = mean(Age)) %>%
filter(mean_Age %in% c(max(mean_Age), min(mean_Age)))
global_mean_age <- mean(filt_frame$Age)
Roque <- filter(filt_frame, Sport == "Roque")
nrow(Roque_age)
Roque <- filter(filt_frame, Sport == "Roque")
nrow(Roque)
Rhythmic_Gymnastics <- filter(filt_frame, Sport == "Rhythmic Gymnastics")
nrow(Rhythmic_Gymnastics)
Rhythmic_Gymnastics[!duplicated(Rhythmic_Gymnastics$Name)]
distinct(Rhythmic_Gymnastics, Age, .keep_all = T)
distinct(Rhythmic_Gymnastics, Name, .keep_all = T)
Rhythmic_Gymnastics_unique <- distinct(Rhythmic_Gymnastics, Name, .keep_all = T)
t.test(Rhythmic_Gymnastics_unique$Age, mu = global_mean_age,
alternative = "two.sided")
Tab_medal <- filter(filt_frame, Medal != "participant")
Medals <- filter(filt_frame, Medal != "participant")
Tab_Medals <- table(Medals$Team, Medals$Medal)
chisq.test(Tab_Medals)
Medals <- filter(filt_frame, Medal != "participant")
Tab_Medals <- table(Medals$Team, Medals$Medal)
chisq.test(Tab_Medals)
chisq.test(Tab_Medals)
chisq.test(Tab_Medals)
Tab_Medals <- table(Medals$Team, Medals$Medal)
Tab_Medals
Medals$Medal <- 1
Medals
Tab_Medals <- table(Medals$Team, Medals$Medal)
chisq.test(Tab_Medals)
Tab_Medals
Roque <- filter(filt_frame, Sport == "Roque")
nrow(Roque)
source('~/Desktop/R_project_1/athlete_events/Analysis.R')
nrwoe(raw_frame)
nrowe(raw_frame)
nrow(raw_frame)
nrow(filt_frame)
nrow(HWfilt_frame)
nrow(HW_filt_frame)
rm(list=ls())
